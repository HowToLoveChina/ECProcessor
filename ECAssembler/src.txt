		ldo r15 , r15
		sub r15		//initialise zero in r15 
		adrld r15	
		memrd r14	//load (-a) from 0x0 to r14
		setflg if, one	//initialise if(infinity_flag)
		ldo r15,r15
		mov r0		//initilise store [g,k,PX,PY] = [r0,r1,r2,r3]
		mov r1
		mov r2
		mov r3
@loadPts	memrd r10	//load [g,k,PX,PY] to [r10,r11,r12,r13]
		adrinc 1
		memrd r11
		adrinc 1
		memrd r12
		adrinc 1
		memrd r13
		ldo r10, r15	//EC Point Addition [r0,r1,r2,r3,if] += [r10,r11,r12,r13]
		sub r10		//[r0,r1]+=[r10,r11]
		ldo r0, r10
		sub r0
		ldo r11, r15
		sub r11
		ldo r1, r11
		sub r1
		setflg zf,if
		jz p_ni		//jmp if if=0
		ldo r12, r12	//[r0..] is inifinity, easy job
		mov r2
		ldo r13,r13
		mov r3
		setflg if, zero
		jnz ADD_DONE
@p_ni		ldo r2, r12	//(p_x, q_x) Normal Add, still need to check if result is inf or double
		sub r4 		//(r4 = p_x - q_x)
		tstz r4		//p_x-q_x
		jz DOUBLE_PRE
		ldo r4,r4	
		inv r4 		//r4 = (p_x-q_x)^(-1)
		ldo r3, r13 	//(p_y, q_y)
		sub r5 		//r5 = p_y - q_y
		ldo r4, r5 	//[(p_x-q_x)^(-1), p_y - q_y]
		mul r4 		//r4 = s = (p_y - q_y)/(p_x-q_x)
		jnz COMMON
@DOUBLE_PRE	ldo r3, r13 	//(p_y, q_y)
		sub r4		//r4 = p_y - q_y
		tstz r4		//p_y - q_y
		jz DOUBLE
@R_INF		setflg if, one	//result is infinity
		ldo r15, r15
		mov r2
		mov r3
		jnz ADD_DONE
@DOUBLE		ldo r15, r13	//(0, q_y)
		sub r4		//r4 = -q_y
		ldo r13, r4	//(q_y, -q_y)
		sub r3		//r3 = q_y - (-q_y) = 2y
		inv r3		//r3 = (2y)^(-1)
		ldo r12, r12	//(q_x, q_x)
		mul r5		//r5 =q_x^2
		ldo r15, r5	//(0, q_x^2)
		sub r4		//r4 = -x^2
		ldo r5, r4	//(x^2, -x^2)
		sub r5		//r5 = 2*x^2
		sub r5		//r5 = 3*x^2
		ldo r5, r14	//(3x^2, -A)
		sub r4		//r4 = 3x^2+A
		ldo r3, r4	//(2y^-1, 3x^2+A)
		mul r4		//r4 = s = (3x^2+A)/2y;
@COMMON		ldo r4, r4	//(s, s)
		mul r5		//r5 = s*s
		ldo r5, r2	//s^2, p_x
		sub r5		//r5 = s^2-px
		ldo r5, r12	//s^2-px, qx
		sub r2		//r2 = s^2-px-qx 		<== X
		ldo r2, r12	//X, qx
		sub r3		//r3 = X-qx
		ldo r3, r4	//X-qx, s
		mul r3		//r3 = s*(X-qx)
		ldo r15, r13	//0, qy 
		sub r4		//r4 = -qy
		ldo r4, r3	//-qy, s*(X-qx)
		sub r3		//r3 = -[py+s*(X-px)]	<== Y
@ADD_DONE	tstz r0


